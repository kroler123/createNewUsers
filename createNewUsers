#!groovy
// Check properties
properties([disableConcurrentBuilds()])

pipeline {
//        agent {
//                label 'master'
//        }
	agent none
        parameters {

		string(name: 'login', defaultValue: 'null', description: 'Введите логин')

		string(name: 'pass', defaultValue: '', description: 'Введите пароль')

		string(name: 'fName', defaultValue: '', description: 'Введите имя')

		string(name: 'sName', defaultValue: '', description: 'Введите фамилию')

		choice(name: 'ou', choices: ['Salon Admins','Salon Users'],description: 'Выберите права')

		booleanParam(name: 'GroupRD',defaultValue: true, description: 'Использовать группу удалённого доступа?')

		booleanParam(name: 'GroupAdmin',defaultValue: false, description: 'Использовать группу Администратор?')

		choice(name: 'task', choices: ['create','management'],description: 'Выберите задачу - Create = Создание , Management - Включение или отключение аккаунта ')

		booleanParam(name: 'account',defaultValue: false, description: 'Включить или выключить пользователя')

	}
        options {
                buildDiscarder(logRotator(numToKeepStr: '10', artifactNumToKeepStr: '10'))
                timestamps()
                skipStagesAfterUnstable()
                disableConcurrentBuilds()
        }
	stages {
                stage("Скачиваем базу в файл") {
                        steps {
                                script {
                                        sh (script: 'mysql -h 192.168.102.2 -u kalinkin -p159753 -Bse "SELECT Domain_Controller FROM rbt WHERE virtual = \'proxmox\' AND Domain_Controller" -D RBT > DB',label: 'Download DB in the file \"DB\"')
                                }
                        }
                }
		stage("Чтение файла") {
			agent {
				label 'master'
			}
			when {
				expression { params.task == "create" }
			}
			steps {
				script {
					sh (script: '''#!/bin/bash
							while read line 
							do 
							echo $line
							test=`fping "$line"`
							if [ "$test" == "$line is alive" ];then
								echo "login - $login , OU = $ou , Name = $fName $sName , Group = $GroupRD $GroupAdmin"
								ssh -o 'StrictHostKeyChecking no' root@"$line" "/usr/local/samba/bin/samba-tool user create $login $pass --userou='OU=$ou' --given-name=$fName --surname=$sName --script-path=login.bat" < /dev/null
							if [ "$GroupRD" == true ]; then
								ssh -o 'StrictHostKeyChecking no' root@"$line" "/usr/local/samba/bin/samba-tool group addmembers 'Remote Desktop Users' $login" < /dev/null	
							fi
							if [ "$GroupAdmin" == true ]; then
								ssh -o 'StrictHostKeyChecking no' root@"$line" "/usr/local/samba/bin/samba-tool group addmembers 'Domain Admins' $login" < /dev/null
							fi
							fi
							done < DB
							''',label: 'Добавляние пользователя в LinuxDC')
				}
			}
		}
		stage("Чтение файла") {
			agent {
				label 'slave'
			}
			when {
				expression { params.task == "create" }
			}
			steps {
				script {
					powershell label: 'windows', script: '''# вот тут мы удаляем старые переменные и говорим пошику чтобы он при возникновении ошибор забивал хер не них
							Remove-Job * -Force
							$VerbosePreference = "Continue"
							$ArrayDomain = New-Object System.Collections.Hashtable
							[void] $ArrayDomain.Add("kazan.rbt1.ru", "10.20.103.4")
							#$ArrayDomainLocal = New-Object System.Collections.Hashtable

							$ScriptBlockAD = [scriptblock]::Create({
							Import-Module activedirectory
							$AccountName = "$login"
							$Pass = "$pass"
							# фамилия
							$Surname = "sName"   
							# имя
							$GivenName = "$fName"
							$DisplayName = $Surname + " " + $GivenName            
    
							# -- 3. Начало добавления пользователя -- 
    
							$search1 = "script_bot" #к этому юзерю в группу будет добавляться новый 
							#Абракадабра со строками для получения папки админов салона куда будем пихать юзеря
							$UserData = Get-ADUser -identity $search1 -properties *

							$DCName =  $UserData.CanonicalName
							$p = $DCName.IndexOf("/")
							$DCName = $DCName.Substring(0,$p)
							$DCName = $DCName.Insert(0,"@")    
							$string = $UserData.DistinguishedName
							$a = $string.IndexOf("OU=") 
							$b = $string.Length - $a 
							$TargetPath = $string.Substring($a,$b)
							#строка добавления нового юзеря
							$c = $AccountName.Length
							$UPN = $AccountName.Insert($c,$DCName) 
              
							New-ADUser -Name $DisplayName -SAMAccountName $AccountName -GivenName $GivenName -Surname $Surname -DisplayName $DisplayName -CannotChangePassword $false -UserPrincipalName $UPN -Path "$TargetPath"

							#добавляем группы прав юзерю 
							Add-ADgroupmember "Administrators" -Members $AccountName
							Add-ADgroupmember "Domain admins" -Members $AccountName
							Add-ADgroupmember "Remote Desktop Users" -Members $AccountName
							Add-ADgroupmember "Администраторы" -Members $AccountName
							Add-ADgroupmember "Администраторы домена" -Members $AccountName
							Add-ADgroupmember "Пользователи удаленного рабочего стола" -Members $AccountName
        
							#устанавливаем пароль юзерю
							Set-ADAccountPassword $AccountName -NewPassword (ConvertTo-SecureString -AsPlainText -String $Pass -force)       

							#требуем сменить пароль при следующем входе
							Set-ADUser $AccountName -ChangePasswordAtLogon $true

							#аквтивируем и разблокируем профиль юзеря
							Unlock-ADAccount $AccountName
							Enable-ADAccount $AccountName 
    
							# -- конец добавления пользователя -- 
    
							#проверочка 
							return Get-ADUser -identity $AccountName  #-properties *
							})
							$ArrayDomain = $ArrayDomain.GetEnumerator() | Sort-Object Value -descending

							foreach ($d in $ArrayDomain) 
							{
								$UserStartLogin = "script_bot"
								$pk = "j)we};2^,?3`";fS"
								$InvokeUser = $d.Name + "\" + $UserStartLogin
								$UserStartPass = ConvertTo-SecureString -AsPlainText -String $pk -Force
								#$cred = (new-object -typename System.Management.Automation.PSCredential -argumentlist $InvokeUser, (convertto-securestring $UserStartPass -asplaintext -force));
								$cred = (new-object -typename System.Management.Automation.PSCredential -argumentlist $InvokeUser, $UserStartPass);
								Invoke-Command -ComputerName $d.Value -Credential $cred -ScriptBlock $ScriptBlockAD -AsJob -JobName $d.Name | Out-Null
							}
							# local admin

							$JobSum = (Get-Job | Measure-Object).Count 
							$JobOld = @()
							do {
								$JobNew = @()
								$steateJob = Get-Job
								ForEach  ($j in $steateJob){
										if($j.state -eq 'Failed'){
											$JobNew += $j.Name
											if($JobOld -notcontains $j.Name){
											Write-Host  $j.Name"`t"$j.state -ForegroundColor DarkYellow
											}
										}
										if($j.state -eq 'Completed'){
											$JobNew += $j.Name
											if($JobOld -notcontains $j.Name){
												Write-Host  $j.Name"`t"$j.state -ForegroundColor DarkGreen
											}
										}
								}
								if($JobNew.Length -ne $JobSum){
									$JobOld = $JobNew
									Start-Sleep -Milliseconds 500
								}
								Write-Progress -Activity "Working..."  -Status "Please wait." -PercentComplete (($JobNew.Length / $JobSum) * 100)
							}
							until ($JobNew.Length -eq $JobSum)
							Write-Progress -Activity "Working..." `   -Completed -Status "All done."
							foreach($j in $steateJob)
							{
								Write-Host $($j.Name)
								Write-Host '-------------'
								receive-job -Name $j.Name
							}'''
				}
			}
		}
		stage("Вкл/выкл аккаунт") {
			agent {
				label 'master'
			}
			when {
				expression { params.task == "management" }
			}
			steps {
				script {
					sh (script: '''#!/bin/bash
							if [ "$account" == true ];then
							text='будет включён' 
							act="enable"
							else
							text='будет отключён'
							act="disable"
							fi
							while read line
							do
							echo $line
							test=`fping "$line"`
							if [ "$test" == "$line is alive" ];then
							echo "Пользователь $login $text"
							ssh -o 'StrictHostKeyChecking no' root@"$line" "/usr/local/samba/bin/samba-tool user $act $login" < /dev/null
							fi
							done < DB
							''',label: 'Управление пользователями')
				}
			}
		}
	}
}
